#include "modmul.h"

/*
Perform stage 1:

- read each 3-tuple of N, e and m from stdin,
- compute the RSA encryption c,
- then write the ciphertext c to stdout.
*/

void RSA_Encrypt(){
	mpz_t N, e, m, c;	
		
	//init
	mpz_init(N);
	mpz_init(e);
	mpz_init(m);
	mpz_init(c);
	
	while(gmp_scanf("%Zx", N) != EOF){
		//read
		gmp_scanf("%Zx", e);
		gmp_scanf("%Zx", m);
	
		//Encryption
		mpz_powm(c, m, e, N);

		gmp_printf("%Zx\n", c);
	}

	mpz_clear(N);
	mpz_clear(e);
	mpz_clear(m);
	mpz_clear(c);
		
}

void stage1() {
	RSA_Encrypt();
}

/*
Perform stage 2:

- read each 9-tuple of N, d, p, q, d_p, d_q, i_p, i_q and c from stdin,
- compute the RSA decryption m,
- then write the plaintext m to stdout.
*/

void RSA_Decrypt(){
	mpz_t N, d, p, q, d_p, d_q, i_p, i_q, c, m ;

	mpz_init(N);
	mpz_init(d);
	mpz_init(p);
	mpz_init(q);
	mpz_init(d_p);
	mpz_init(d_q);
	mpz_init(i_p);
	mpz_init(i_q);
	mpz_init(c);
	mpz_init(m);
	
	while(gmp_scanf("%Zx", N) != EOF){
		//read
		gmp_scanf("%Zx", d);
		gmp_scanf("%Zx", p);
		gmp_scanf("%Zx", q);
		gmp_scanf("%Zx", d_p);
		gmp_scanf("%Zx", d_q);
		gmp_scanf("%Zx", i_p);
		gmp_scanf("%Zx", i_q);
		gmp_scanf("%Zx", c);
		//compute m
		mpz_powm(m, c, d, N);
		
		gmp_printf("%Zx\n", m);	
	}
	//clear
	mpz_clear(N);
	mpz_clear(d);
	mpz_clear(p);
	mpz_clear(q);
	mpz_clear(d_p);
	mpz_clear(d_q);
	mpz_clear(i_p);
	mpz_clear(i_q);
	mpz_clear(c);
	mpz_clear(m);
}

void stage2() {
	RSA_Decrypt();
}

/*
Perform stage 3:

- read each 5-tuple of p, q, g, h and m from stdin,
- compute the ElGamal encryption c = (c_1,c_2),
- then write the ciphertext c to stdout.
*/

void ElGamal_Encrypt(){
	mpz_t p, q, g, h, m, y,c1,c2,s;
	
	mpz_init(p);
	mpz_init(q);
	mpz_init(g);
	mpz_init(h);
	mpz_init(m);
	
	mpz_init(y);
	mpz_init(c1);mpz_init(c2);mpz_init(s);

	while(gmp_scanf("%Zx", p) != EOF){	
		gmp_scanf("%Zx", q);
		gmp_scanf("%Zx", g);
		gmp_scanf("%Zx", h);
		gmp_scanf("%Zx", m);

		//choose random y
		mpz_set_str(y, "00",2);

		mpz_powm(s, h, )

		
		
	}
}

void stage3() {

}

/*
Perform stage 4:

- read each 5-tuple of p, q, g, x and c = (c_1,c_2) from stdin,
- compute the ElGamal decryption m,
- then write the plaintext m to stdout.
*/

void stage4() {

  // fill in this function with solution

}

/*
The main function acts as a driver for the assignment by simply invoking
the correct function for the requested stage.
*/

int main( int argc, char* argv[] ) {
  if     ( !strcmp( argv[ 1 ], "stage1" ) ) {
    stage1();
  }
  else if( !strcmp( argv[ 1 ], "stage2" ) ) {
    stage2();
  }
  else if( !strcmp( argv[ 1 ], "stage3" ) ) {
    stage3();
  }
  else if( !strcmp( argv[ 1 ], "stage4" ) ) {
    stage4();
  }

  return 0;
}
